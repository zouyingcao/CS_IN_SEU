--lpm_mux CASCADE_CHAIN="MANUAL" DEVICE_FAMILY="Cyclone III" IGNORE_CASCADE_BUFFERS="OFF" LPM_PIPELINE=1 LPM_SIZE=4 LPM_WIDTH=8 LPM_WIDTHS=2 clken clock data result sel
--VERSION_BEGIN 9.1SP2 cbx_lpm_mux 2010:03:24:20:43:43:SJ cbx_mgl 2010:03:24:21:01:05:SJ  VERSION_END


-- Copyright (C) 1991-2010 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 8 reg 8 
SUBDESIGN mux_d9f
( 
	clken	:	input;
	clock	:	input;
	data[31..0]	:	input;
	result[7..0]	:	output;
	sel[1..0]	:	input;
) 
VARIABLE 
	external_latency_ffsa[7..0] : dffe;
	result_node[7..0]	: WIRE;
	sel_node[1..0]	: WIRE;
	w_data111w[3..0]	: WIRE;
	w_data136w[3..0]	: WIRE;
	w_data161w[3..0]	: WIRE;
	w_data186w[3..0]	: WIRE;
	w_data36w[3..0]	: WIRE;
	w_data61w[3..0]	: WIRE;
	w_data6w[3..0]	: WIRE;
	w_data86w[3..0]	: WIRE;

BEGIN 
	external_latency_ffsa[].clk = clock;
	external_latency_ffsa[].d = ( result_node[]);
	external_latency_ffsa[].ena = clken;
	result[7..0] = external_latency_ffsa[7..0].q;
	result_node[] = ( (((w_data186w[1..1] & sel_node[0..0]) & (! (((w_data186w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data186w[2..2]))))) # ((((w_data186w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data186w[2..2]))) & (w_data186w[3..3] # (! sel_node[0..0])))), (((w_data161w[1..1] & sel_node[0..0]) & (! (((w_data161w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data161w[2..2]))))) # ((((w_data161w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data161w[2..2]))) & (w_data161w[3..3] # (! sel_node[0..0])))), (((w_data136w[1..1] & sel_node[0..0]) & (! (((w_data136w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data136w[2..2]))))) # ((((w_data136w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data136w[2..2]))) & (w_data136w[3..3] # (! sel_node[0..0])))), (((w_data111w[1..1] & sel_node[0..0]) & (! (((w_data111w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data111w[2..2]))))) # ((((w_data111w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data111w[2..2]))) & (w_data111w[3..3] # (! sel_node[0..0])))), (((w_data86w[1..1] & sel_node[0..0]) & (! (((w_data86w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data86w[2..2]))))) # ((((w_data86w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data86w[2..2]))) & (w_data86w[3..3] # (! sel_node[0..0])))), (((w_data61w[1..1] & sel_node[0..0]) & (! (((w_data61w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data61w[2..2]))))) # ((((w_data61w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data61w[2..2]))) & (w_data61w[3..3] # (! sel_node[0..0])))), (((w_data36w[1..1] & sel_node[0..0]) & (! (((w_data36w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data36w[2..2]))))) # ((((w_data36w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data36w[2..2]))) & (w_data36w[3..3] # (! sel_node[0..0])))), (((w_data6w[1..1] & sel_node[0..0]) & (! (((w_data6w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data6w[2..2]))))) # ((((w_data6w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data6w[2..2]))) & (w_data6w[3..3] # (! sel_node[0..0])))));
	sel_node[] = ( sel[1..0]);
	w_data111w[] = ( data[28..28], data[20..20], data[12..12], data[4..4]);
	w_data136w[] = ( data[29..29], data[21..21], data[13..13], data[5..5]);
	w_data161w[] = ( data[30..30], data[22..22], data[14..14], data[6..6]);
	w_data186w[] = ( data[31..31], data[23..23], data[15..15], data[7..7]);
	w_data36w[] = ( data[25..25], data[17..17], data[9..9], data[1..1]);
	w_data61w[] = ( data[26..26], data[18..18], data[10..10], data[2..2]);
	w_data6w[] = ( data[24..24], data[16..16], data[8..8], data[0..0]);
	w_data86w[] = ( data[27..27], data[19..19], data[11..11], data[3..3]);
END;
--VALID FILE
